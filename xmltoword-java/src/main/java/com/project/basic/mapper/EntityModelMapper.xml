<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.project.basic.mapper.EntityModelMapper">
	<!-- 批量插入 -->
	<insert id="InsertAndUpdate">
		INSERT INTO ${tableName}
		<foreach collection="fieldList" open="(" close=")" separator="," item="field">
			${field}
		</foreach>
		VALUES
		<foreach collection="dataMap" item="item" separator="," open="(" close=")" >
			#{item}
		</foreach>    
		ON DUPLICATE KEY UPDATE 
		<foreach collection="dataMap" item="item" index="fieldName" separator=","  >
			 ${fieldName} = #{item}
		</foreach>    
               
	</insert>
		<!-- 批量插入 附件 -->
	<insert id="batchInsertAndUpdate_fj">
		INSERT INTO ${tableName}
		(ID, PID, LJ,
		name, FWL, RD, SLTLJ,WJGS,WJFL
		)
		VALUES
		<foreach collection="fjModulList" item="item" separator=",">
			(#{item.ID},#{item.PID},#{item.LJ},#{item.name},#{item.FWL},#{item.RD},#{item.SLTLJ},#{item.WJGS},#{item.WJFL})
		</foreach>
	</insert>
	
		<!-- 批量插入 -->
	<insert id="batchInsertAndUpdate" parameterType="com.core.bean.ParameterMap">
		INSERT INTO ${tableName}
		<foreach collection="fieldList" index="field" item="fieldVal"
			separator="," open="(" close=")">
			${fieldVal}
		</foreach>
		VALUES
		<foreach collection="list" index="index" item="entityModel"
			separator=",">
			<foreach collection="entityModel" index="key" item="item"
				separator="," open="(" close=")">
				#{item}
			</foreach>
		</foreach>
		ON DUPLICATE KEY UPDATE
		<foreach collection="fieldList" index="field" item="fieldVal"
			separator=",">
			${fieldVal}=VALUES(${fieldVal})
		</foreach>
	</insert>
		<delete id="forDelete">
		delete from ${tableName}
		where ${primaryKey} in (
		<foreach collection="idList" item="item" index="index"
			separator=",">
			'${item}'
		</foreach>
		)
	</delete>
	<select id="selectByTableNameAndId" resultType="java.util.Map">
		SELECT
		t.*
		FROM
		${tableName} t
		WHERE 1=1
		<if test="field != null and value != null">
			and
			${field} =#{value}
		</if>
		<if test="cond != null">${cond}</if>
	</select>
	<select id="selectOneByTableNameAndId" resultType="java.util.Map">
		SELECT
		*
		FROM
		${tableName}
		WHERE ID=#{id}
	</select>
	
	
	<select id="selectTableName" resultType="java.lang.String">
		SELECT
		TABLE_NAME
		FROM
		information_schema. TABLES
		WHERE
		TABLE_COMMENT= '${tableComment}'
		<if test="tableSchema != null">
		and	table_schema = '${tableSchema}'
		</if>
	</select>
	
	<select id="getTableNameNum" resultType="int">
		SELECT COUNT(*)
	FROM
		information_schema.`TABLES`
	WHERE
	upper(TABLE_NAME) = '${tableName}'
	<if test="tableSchema != null">
	and	table_schema = '${tableSchema}'
	</if>
	</select>
	
	

	<delete id="deleteDataByCond">
		delete from ${tableName}
		WHERE 1=1
		<if test="field != null and value != null">
			and
			${field} =#{value}
		</if>
		<if test="cond != null">${cond}</if>

	</delete>
	<delete id="deleteDataByIdlistAndCond">
		delete from ${tableName}
		WHERE 1=1
		<if test="field != null and idList != null">
			and ${field} in
			<foreach collection="idList" item="id" open="(" separator=","
				close=")">
				#{id}
			</foreach>
		</if>
		<if test="cond != null">${cond}</if>
	</delete>

	<select id="selectFeildNameAndCommentByTableName" resultType="java.util.Map">
		SELECT
		COLUMN_NAME,
		COLUMN_COMMENT
		FROM
		information_schema.`COLUMNS`
		WHERE 1=1
		and TABLE_SCHEMA = #{tableSchema}
		AND TABLE_NAME = #{tableName}
	</select>
	<select id="selectSingByTableNameAndId" resultType="java.util.Map">
		SELECT
		t.*
		FROM
		${tableName} t
		WHERE 1=1
		<if test="field != null and value != null">
			and
			${field} =#{value}
		</if>
		<if test="cond != null">${cond}</if>
		limit 1
		<!-- order by BSFKDWLX desc -->
	</select>
	<select id="selectSingByTableNameAndIdAndHQfield" resultType="java.util.Map">
		SELECT
		${HQfield}
		FROM
		${tableName}
		WHERE 1=1
		<if test="field != null and value != null">
			and
			${field} =#{value}
		</if>
		<if test="cond != null">${cond}</if>
		limit 1
		<!-- order by BSFKDWLX desc -->
	</select>
		<select id="selectByTableNameAndIdAndHQfield" resultType="java.util.Map">
		SELECT
		${HQfield}
		FROM
		${tableName}
		WHERE 1=1
		<if test="field != null and value != null">
			and
			${field} =#{value}
		</if>
		<if test="cond != null">${cond}</if>

		<!-- order by BSFKDWLX desc -->
	</select>


	<select id="selectByTableNameAndFeildAndIdlist" resultType="java.util.Map">
		SELECT
		t.*
		FROM
		${tableName} t
		WHERE
		1=1
		<if test="field != null and idList != null">
			and ${field} in
			<foreach collection="idList" item="id" open="(" separator=","
				close=")">
				#{id}
			</foreach>
		</if>
		<if test="cond != null">${cond}</if>
	</select>
	<select id="selectByTableNameAndFeildAndIdlist2" resultType="java.util.Map">
		SELECT
		t.*
		FROM
		${tableName} t
		WHERE
		1=1
		<if test="field != null and idList != null">
			and ${field} not in
			<foreach collection="idList" item="id" open="(" separator=","
				close=")">
				#{id}
			</foreach>
		</if>
		<if test="cond != null">${cond}</if>
	</select>
	
	<select id="statisticByTableNameAndId" resultType="int">
		SELECT
		count(*)
		FROM
		${tableName} t
		WHERE 1=1
		<if test="field != null and value != null">
			and
			${field} =#{value}
		</if>
		<if test="cond != null">${cond}</if>
	</select>
	<select id="statisticByTableNameAndFeildAndIdlist" resultType="int">
		SELECT
		count(*)
		FROM
		${tableName} t
		WHERE
		1=1
		<if test="field != null and idList != null">
			and ${field} in
			<foreach collection="idList" item="id" open="(" separator=","
				close=")">
				#{id}
			</foreach>
		</if>
		<if test="cond != null">${cond}</if>
	</select>
	<select id="statisticByTableNameAndFeildAndIdlist2" resultType="int">
		SELECT
		count(*)
		FROM
		${tableName} t
		WHERE
		1=1
		<if test="field != null and idList != null">
			and ${field} not in
			<foreach collection="idList" item="id" open="(" separator=","
				close=")">
				#{id}
			</foreach>
		</if>
		<if test="cond != null">${cond}</if>
	</select>

	<select id="selectFieldAndcommentByTableName" resultType="java.util.Map">
		SELECT
		t.*
		FROM
		${tableName} t
		WHERE 1=1
		<if test="field != null and value != null">
			and
			${field} =#{value}
		</if>
		<if test="cond != null">${cond}</if>
	</select>
	<select id="statisticDataByCondTableName" resultType="int">
			SELECT COUNT(ID) from ${tableName} <if test="cond != null ">${cond}</if> 
	</select>

	<select id="getSYBUserListByRoleName" resultType="java.util.Map">
		SELECT
		u.ID USERID,u.NAME UNAME ,u.PHOTOPATH,u.SEX
		FROM
		PRIVS_USER u
		WHERE
		u.ID IN (
		SELECT
		ur.USERID
		FROM
		PRIVS_USER_ROLE ur
		WHERE
		ur.ROLEID IN (
		SELECT
		role.id
		FROM
		`PRIVS_ROLE` role
		WHERE
		role.`NAME` = '${roleName}'
		)
		)
		<if test="userid != null">
			AND u.DEPARTMENTID = (SELECT pd.PARENTID FROM `PRIVS_DEPARTMENT` pd where pd.ID = (SELECT DEPARTMENTID from PRIVS_USER ut where ut.id = '${userid}'))
		</if>
	</select>
	<select id="getSYBUserListByRoleNameFromLeader" resultType="java.util.Map">
		SELECT
		u.ID USERID,u.NAME UNAME ,u.PHOTOPATH,u.SEX
		FROM
		PRIVS_LEADER lead
		left join PRIVS_USER u on lead.USERID = u.id
		WHERE
		EXISTS (
			SELECT
			1
			FROM
			PRIVS_USER user
			WHERE
			lead.DEPARTMENTID in (
				select PARENTID from PRIVS_DEPARTMENT where id  = (select DEPARTMENTID from PRIVS_USER u1 where u1.id = '${userid}')
			)
		)

	</select>
	<select id="testUserRole" resultType="int">
		SELECT
		count(*)
		FROM
		PRIVS_USER_ROLE ur
		WHERE
		EXISTS (
		SELECT
		role.id
		FROM
		`PRIVS_ROLE` role
		WHERE
		role.`NAME` = '${roleName}'
		and role.id = ur.ROLEID
		)

		<if test="userid != null">
			and ur.USERID = '${userid}'
		</if>
	</select>
	<select id="getUserListByUserRole" resultType="java.util.Map">
		SELECT
		u.ID USERID,u.NAME UNAME,u.PHOTOPATH,u.SEX
		FROM
		PRIVS_USER_ROLE ur
		left join PRIVS_USER u on ur.USERID = u.id
		WHERE
		EXISTS (
		SELECT
		role.id
		FROM
		`PRIVS_ROLE` role
		WHERE
		role.`NAME` = '${roleName}'
		and role.id = ur.ROLEID
		)

	</select>

	<select id="getBMUserListByUserRole" resultType="java.util.Map">
		SELECT
		u.ID USERID,u.NAME UNAME ,u.PHOTOPATH,u.SEX
		FROM
		PRIVS_USER_ROLE ur
		left join PRIVS_USER u on ur.USERID = u.id
		WHERE
		EXISTS (
		SELECT
		role.id
		FROM
		`PRIVS_ROLE` role
		WHERE
		role.`NAME` = '${roleName}'
		and role.id = ur.ROLEID
		)
		<if test="userid != null">
			and u.DEPARTMENTID = (SELECT DEPARTMENTID from PRIVS_USER ut where ut.id = '${userid}')
		</if>
	</select>

	<select id="getBMUserListByUserRoleFromLeader" resultType="java.util.Map">
		SELECT
		u.ID USERID,u.NAME UNAME ,u.PHOTOPATH,u.SEX
		FROM
		PRIVS_LEADER lead
		left join PRIVS_USER u on lead.USERID = u.id
		left join PRIVS_DEPARTMENT pd on pd.id = lead.DEPARTMENTID
		WHERE
		EXISTS (
			SELECT
			1
			FROM
			PRIVS_USER user
			WHERE
			lead.DEPARTMENTID in (
				select DEPARTMENTID from PRIVS_USER u1 where u1.id = '${userid}'
			)
		)

	</select>


	<select id="getUseridListByRoleName" resultType="String">
		SELECT
		u.ID
		FROM
		PRIVS_USER u
		WHERE
		u.ID IN (
		SELECT
		ur.USERID
		FROM
		PRIVS_USER_ROLE ur
		WHERE
		ur.ROLEID IN (
		SELECT
		role.id
		FROM
		`PRIVS_ROLE` role
		WHERE
		role.`NAME` = '${roleName}'
		)
		)
		<if test="bmid != null">
			AND u.DEPARTMENTID = (SELECT pd.PARENTID FROM `PRIVS_DEPARTMENT` pd where pd.ID = '${bmid}')
		</if>
		<if test="cond != null">
			${cond}
		</if>
	</select>



	<select id="getFiledValueByCondTabalename" resultType="java.lang.String">
	select  DISTINCT  ${filed} from ${tablename}
	<if test="cond!=null">${cond}</if>
	</select>
	
	<select id="sqlByCondReturnListString" resultType="String">
		${cond}
	</select>
		<select id="sqlByCondReturnString" resultType="String">
		${cond}
	</select>
	<select id="sqlByCondReturnInteger" resultType="int">
		${cond}
	</select>
		<select id="sqlByCondReturnListMap" resultType="java.util.Map">
		${cond}
	</select>


	<select id="sqlByCondReturnDouble" resultType="double">
		${cond}
	</select>
		<select id="sqlByCondReturnMap" resultType="java.util.Map">
		${cond}
	</select>
	<update id="updateSql">
		${cond}
	</update>
</mapper>

